{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["quotes","author","text","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getNewRandomQuote","index","state","quoteIndex","Math","round","random","length","setState","react_default","a","createElement","className","id","href","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,SAAS,CAAC,CACZC,OAAQ,WACRC,KAAM,2DAER,CACED,OAAQ,cACRC,KAAM,gDAER,CACED,OAAQ,kBACRC,KAAM,mGAER,CACED,OAAQ,eACRC,KAAM,+EAER,CACED,OAAQ,eACRC,KAAM,+IAyDKC,cAnDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,kBAAoB,WAElB,IADA,IAAIC,EAAQR,EAAKS,MAAMC,WAChBF,IAAUR,EAAKS,MAAMC,YAC1BF,EAAQG,KAAKC,MAAMD,KAAKE,UAAYlB,EAAOmB,OAAO,IAEpDd,EAAKe,SAAS,CAACL,WAAYF,KAf3BR,EAAKS,MAAQ,CACXC,YAAa,GAHEV,oFASjBG,KAAKI,qDAcL,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEXH,EAAAC,EAAAC,cAAA,WAASE,GAAG,aAIVJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAGbH,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAN,IAAezB,EAAOQ,KAAKM,MAAMC,YAAYb,KAA7C,KAIAmB,EAAAC,EAAAC,cAAA,KAAGE,GAAG,UAAN,IAAiBzB,EAAOQ,KAAKM,MAAMC,YAAYd,SAIjDoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,8BAA8BC,GAAG,cAAcC,KAAK,4BAA2BL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBACzGH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,8BAA8BC,GAAG,YAAYE,QAASnB,KAAKI,mBAA7E,uBA7CIgB,IAAMC,WCbJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e15579f0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst quotes = [{\n    author: \"Dr.Seuss\",\n    text: \"Don't cry because it's over, smile because it happened.\"\n  },\n  {\n    author: \"Oscar Wilde\",\n    text: \"Be yourself; everyone else is already taken.\"\n  },\n  {\n    author: \"Albert Einstein\",\n    text: \"Two things are infinite: the universe and human stupidity; and I'm not sure about the universe.\"\n  },\n  {\n    author: \"Robert Frost\",\n    text: \"In three words I can sum up everything I've learned about life: it goes on.\"\n  },\n  {\n    author: \"Maya Angelou\",\n    text: \"I've learned that people will forget what you said, people will forget what you did, but people will never forget how you made them feel.\"\n  }\n]\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      quoteIndex: -1 \n    }\n  }\n\n  // User Story #6: On first load, my quote machine displays a random quote in the element with id=\"text\".\n  componentWillMount() {  \n    this.getNewRandomQuote();\n  }\n\n  getNewRandomQuote = () => {\n    let index = this.state.quoteIndex;\n    while (index === this.state.quoteIndex) {\n      index = Math.round(Math.random() * (quotes.length-1));\n    }    \n    this.setState({quoteIndex: index});\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n          {/* User Story #1: I can see a wrapper element with a corresponding id=\"quote-box\".       */}\n          <section id=\"quote-box\">\n          {/* User Story #5: Within #quote-box, I can see a clickable element with a corresponding id=\"tweet-quote\". */}\n          {/* User Story #10: I can tweet the current quote by clicking on the #tweet-quote a element. This a element should include the \"twitter.com/intent/tweet\" path in it's href attribute to tweet the current quote.\n */}\n            <div className=\"quote-container\">\n              {/* User Story #2: Within #quote-box, I can see an element with a corresponding id=\"text\". */}\n              {/* User Story #6: On first load, my quote machine displays a random quote in the element with id=\"text\". */}\n              <p id=\"text\">\"{quotes[this.state.quoteIndex].text}\"</p>\n              {/* User Story #3: Within #quote-box, I can see an element with a corresponding id=\"author\". */}\n              {/* User Story #7: On first load, my quote machine displays the random quote's author in the element with id=\"author\". */}\n              {/* User Story #9: My quote machine should fetch the new quote's author when the #new-quote button is clicked and display it in the #author element. */}\n              <p id=\"author\">-{quotes[this.state.quoteIndex].author}</p>\n              {/* User Story #4: Within #quote-box, I can see a clickable element with a corresponding id=\"new-quote\". */}\n              {/* User Story #8: When the #new-quote button is clicked, my quote machine should fetch a new quote and display it in the #text element. */}\n            </div>\n            <div className=\"buttons-container\">\n              <a className=\"btn btn-primary quote-color\" id=\"tweet-quote\" href=\"twitter.com/intent/tweet\"><i className=\"fa fa-twitter fa-2x\"></i></a>\n              <button className=\"btn btn-primary quote-color\" id=\"new-quote\" onClick={this.getNewRandomQuote}>New Quote</button>\n            </div>\n          </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}